potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
potencias_data_ts$dia_de_la_semana
## Mes
potencias_data_ts$hora <- hour(potencias_data_ts$Fecha_hora)
potencias_data_ts$mes <- month(potencias_data_ts$Fecha_hora)
potencias_data_ts$anio <- year(potencias_data_ts$Fecha_hora)
potencias_data_ts$hora
potencias_data_ts$mes
potencias_data_ts$anio
# Comprobacion de todos los valores en las columnas recien creadas
unique(potencias_data_ts$periodo_de_la_semana)
unique(potencias_data_ts$dia_de_la_semana)
unique(potencias_data_ts$hora)
unique(potencias_data_ts$mes)
unique(potencias_data_ts$anio)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
potencias_data_ts$periodo_de_la_semana <- as.factor(potencias_data_ts$periodo_de_la_semana)
potencias_data_ts$mes <- as.factor(potencias_data_ts$mes)
potencias_data_ts$hora <- as.factor(potencias_data_ts$hora)
potencias_data_ts$anio <- as.factor(potencias_data_ts$anio)
str(potencias_data_ts)
head(potencias_data_ts)
summary(potencias_data_ts)
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA_TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
View(potencias_data_ts)
View(potencias_data)
f <- file.choose() #elegir el fichero "ptenciageneradora.xlsx"
potencias_data <- read_excel(f)
potencias_data_ts=as.data.frame(potencias_data)
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
potencias_data_ts$dia_de_la_semana
## Mes
potencias_data_ts$hora <- hour(potencias_data_ts$Fecha_hora)
potencias_data_ts$mes <- month(potencias_data_ts$Fecha_hora)
potencias_data_ts$anio <- year(potencias_data_ts$Fecha_hora)
potencias_data_ts$hora
potencias_data_ts$mes
potencias_data_ts$anio
# Comprobacion de todos los valores en las columnas recien creadas
unique(potencias_data_ts$periodo_de_la_semana)
unique(potencias_data_ts$dia_de_la_semana)
unique(potencias_data_ts$hora)
unique(potencias_data_ts$mes)
unique(potencias_data_ts$anio)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
potencias_data_ts$periodo_de_la_semana <- as.factor(potencias_data_ts$periodo_de_la_semana)
potencias_data_ts$mes <- as.factor(potencias_data_ts$mes)
potencias_data_ts$hora <- as.factor(potencias_data_ts$hora)
potencias_data_ts$anio <- as.factor(potencias_data_ts$anio)
str(potencias_data_ts)
head(potencias_data_ts)
summary(potencias_data_ts)
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA_TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA _TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA _TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA_TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIA _TRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
f <- file.choose() #elegir el fichero "ptenciageneradora.xlsx"
potencias_data <- read_excel(f)
potencias_data_ts=as.data.frame(potencias_data)
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
potencias_data_ts$dia_de_la_semana
## Mes
potencias_data_ts$hora <- hour(potencias_data_ts$Fecha_hora)
potencias_data_ts$mes <- month(potencias_data_ts$Fecha_hora)
potencias_data_ts$anio <- year(potencias_data_ts$Fecha_hora)
potencias_data_ts$hora
potencias_data_ts$mes
potencias_data_ts$anio
# Comprobacion de todos los valores en las columnas recien creadas
unique(potencias_data_ts$periodo_de_la_semana)
unique(potencias_data_ts$dia_de_la_semana)
unique(potencias_data_ts$hora)
unique(potencias_data_ts$mes)
unique(potencias_data_ts$anio)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
potencias_data_ts$periodo_de_la_semana <- as.factor(potencias_data_ts$periodo_de_la_semana)
potencias_data_ts$mes <- as.factor(potencias_data_ts$mes)
potencias_data_ts$hora <- as.factor(potencias_data_ts$hora)
potencias_data_ts$anio <- as.factor(potencias_data_ts$anio)
str(potencias_data_ts)
head(potencias_data_ts)
summary(potencias_data_ts)
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico diaria
ggplot(potencias_data_ts, aes(Fecha_hora, POTENCIATRAFO2))+geom_line(color="darkblue", size=1)+ggtitle('Potencias diarias del trafico del establecimiento')+labs(x="Fecha", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico de los dias semanal
ggplot(potencias_data_ts, aes(x=dia_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias semanal del trafico del establecimiento')+labs(x="Dia de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencia trafico entre dias_jornada y fines_semana
ggplot(potencias_data_ts, aes(x=periodo_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias entre semanal del trafico del establecimiento')+labs(x="Periodo de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico mensual
ggplot(potencias_data_ts, aes(x=mes, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias mensuales del trafico del establecimiento')+labs(x="Mes", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comprobacion de existencia de valores faltantes (NA)
anyNA(potencias_data_ts)
# Particion de datos en conjuntos de train, test y validacion.
summary(potencias_data_ts)
### Datos de train: ###
# los datos anteriores desde fecha 2018-01-01 hasta 2018-04-04
train_data<-filter(potencias_data_ts, Fecha_hora< as.Date("2018-04-05"))
summary(train_data)
### Datos de test:  ###
#va a quedar los datos de ultimo dia para testing
test_data <-filter(potencias_data_ts, Fecha_hora>=as.Date("2018-04-05"))
head(test_data,10)
summary(test_data)
length(test_data$Fecha_hora)
medidas_predecir=length(test_data$Fecha_hora) # que son 96 medidas del ultimo dia a predecir
summary(test_data)
### 1.1. Estrategia MIMO
t <- proc.time() # Inicio del cronometro
#- h=>num de valores de predecir, en este caso predecimos los dias de futuro anio
#- lags=> como se incrementa los valores
#- k=> 1 distancia
#- msas=> estrategia MIMO o recursiva
tsfknn_pred_mimo <- knn_forecasting(train_data$POTENCIA_TRAFO,
h = medidas_predecir,
lags = 1:medidas_predecir,   #predecir los futuros 96 medidas del dia
k = 1,
msas = "MIMO")
#- h=>num de valores de predecir, en este caso predecimos los dias de futuro anio
#- lags=> como se incrementa los valores
#- k=> 1 distancia
#- msas=> estrategia MIMO o recursiva
tsfknn_pred_mimo <- knn_forecasting(train_data$POTENCIATRAFO2,
h = medidas_predecir,
lags = 1:medidas_predecir,   #predecir los futuros 96 medidas del dia
k = 1,
msas = "MIMO")
#carga de librerias
library("caret")
library("e1071")
library("lubridate")
library("dummies")
library("imputeTS")
library("ggplot2")
library("forecast")
library("frbs")
library("tsfknn")
# Carga del paquete "ARNN.R"
libreria_arnn=file.choose()
source(libreria_arnn)
library("Metrics") # para rmse
library(tidyr)
library(dplyr)
library(readxl)
library(tidyverse)
##############################
##### Zona de funciones
##############################
# Funcion para mapear cada fecha con su correspondiente periodo de la semana
# Asigna categoria "dia_entre_semana" o "fin_de_semana" a cada fecha
extrae_dia_semana <- function(x) {
val <- weekdays(x) # Funcion que extrae el d???¡ì??as de la semana, dada una fecha
if (grepl("s?bado", val, perl=TRUE) | val == "domingo") {
val2 = "fin_de_semana"
}
else {
val2= "dia_entre_semana"
}
return(val2)
}
f <- file.choose() #elegir el fichero "ptenciageneradora.xlsx"
potencias_data <- read_excel(f)
potencias_data_ts=as.data.frame(potencias_data)
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
potencias_data_ts$dia_de_la_semana
## Mes
potencias_data_ts$hora <- hour(potencias_data_ts$Fecha_hora)
potencias_data_ts$mes <- month(potencias_data_ts$Fecha_hora)
potencias_data_ts$anio <- year(potencias_data_ts$Fecha_hora)
potencias_data_ts$hora
potencias_data_ts$mes
potencias_data_ts$anio
# Comprobacion de todos los valores en las columnas recien creadas
unique(potencias_data_ts$periodo_de_la_semana)
unique(potencias_data_ts$dia_de_la_semana)
unique(potencias_data_ts$hora)
unique(potencias_data_ts$mes)
unique(potencias_data_ts$anio)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
potencias_data_ts$periodo_de_la_semana <- as.factor(potencias_data_ts$periodo_de_la_semana)
potencias_data_ts$mes <- as.factor(potencias_data_ts$mes)
potencias_data_ts$hora <- as.factor(potencias_data_ts$hora)
potencias_data_ts$anio <- as.factor(potencias_data_ts$anio)
str(potencias_data_ts)
head(potencias_data_ts)
summary(potencias_data_ts)
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico diaria
ggplot(potencias_data_ts, aes(Fecha_hora, POTENCIATRAFO2))+geom_line(color="darkblue", size=1)+ggtitle('Potencias diarias del trafico del establecimiento')+labs(x="Fecha", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico de los dias semanal
ggplot(potencias_data_ts, aes(x=dia_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias semanal del trafico del establecimiento')+labs(x="Dia de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencia trafico entre dias_jornada y fines_semana
ggplot(potencias_data_ts, aes(x=periodo_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias entre semanal del trafico del establecimiento')+labs(x="Periodo de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico mensual
ggplot(potencias_data_ts, aes(x=mes, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias mensuales del trafico del establecimiento')+labs(x="Mes", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comprobacion de existencia de valores faltantes (NA)
anyNA(potencias_data_ts)
# Particion de datos en conjuntos de train, test y validacion.
summary(potencias_data_ts)
### Datos de train: ###
# los datos anteriores desde fecha 2018-01-01 hasta 2018-04-04
train_data<-filter(potencias_data_ts, Fecha_hora< as.Date("2018-04-05"))
summary(train_data)
### Datos de test:  ###
#va a quedar los datos de ultimo dia para testing
test_data <-filter(potencias_data_ts, Fecha_hora>=as.Date("2018-04-05"))
head(test_data,10)
summary(test_data)
length(test_data$Fecha_hora)
medidas_predecir=length(test_data$Fecha_hora) # que son 96 medidas del ultimo dia a predecir
summary(test_data)
### 1.1. Estrategia MIMO
t <- proc.time() # Inicio del cronometro
#- h=>num de valores de predecir, en este caso predecimos los dias de futuro anio
#- lags=> como se incrementa los valores
#- k=> 1 distancia
#- msas=> estrategia MIMO o recursiva
tsfknn_pred_mimo <- knn_forecasting(train_data$POTENCIATRAFO2,
h = medidas_predecir,
lags = 1:medidas_predecir,   #predecir los futuros 96 medidas del dia
k = 1,
msas = "MIMO")
proc.time()-t # Detencion del cronometro
# Evaluacion del modelo
ro_mimo <- rolling_origin(tsfknn_pred_mimo, h = medidas_predecir)
ro_mimo
# Grafico de predicciones para el horizonte de pronostico
plot(ro_mimo, h = medidas_predecir)
# Resultados exportados a csv
matriz_pronosticos_mimo<-data.frame(ro_mimo$predictions)
write.csv(matriz_pronosticos_mimo, "out_of_sample_tsfknn_mimo_prediction.csv")
matriz_pronosticos_mimo
# Calculo de rmse
knn_mimo_pred=t(matriz_pronosticos_mimo[1,1:(ncol(matriz_pronosticos_mimo))]) #extrae primera fila de datos
### 1.1. Estrategia MIMO
t <- proc.time() # Inicio del cronometro
#- h=>num de valores de predecir, en este caso predecimos los dias de futuro anio
#- lags=> como se incrementa los valores
#- k=> 1 distancia
#- msas=> estrategia MIMO o recursiva
tsfknn_pred_mimo <- knn_forecasting(train_data$POTENCIATRAFO2,
h = medidas_predecir,
lags = 1:medidas_predecir,   #predecir los futuros 96 medidas del dia
k = 1,
msas = "MIMO")
##############################
##### Zona de funciones
##############################
# Funcion para mapear cada fecha con su correspondiente periodo de la semana
# Asigna categoria "dia_entre_semana" o "fin_de_semana" a cada fecha
extrae_dia_semana <- function(x) {
val <- weekdays(x) # Funcion que extrae el d???¡ì??as de la semana, dada una fecha
if (grepl("s?bado", val, perl=TRUE) | val == "domingo") {
val2 = "fin_de_semana"
}
else {
val2= "dia_entre_semana"
}
return(val2)
}
f <- file.choose() #elegir el fichero "ptenciageneradora.xlsx"
potencias_data <- read_excel(f)
View(potencias_data)
potencias_data_ts=as.data.frame(potencias_data)
View(potencias_data_ts)
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
View(potencias_data_ts)
View(potencias_data_ts)
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
##-----conversion de datos---------------------
# Se aniaden las siguientes variables por considerarse relevantes a la hora de explicar la demanda
## Periodo de la semana (d???¡ì??a entre semana o fin de semana)
potencias_data_ts$periodo_de_la_semana <- unlist(lapply(potencias_data_ts$Fecha_hora, extrae_dia_semana))
potencias_data_ts$periodo_de_la_semana
## Dia de la semana
potencias_data_ts$dia_de_la_semana <-weekdays(potencias_data_ts$Fecha_hora) # extrae el d???¡ì??a de la semana, dada una fecha
potencias_data_ts$dia_de_la_semana
## Mes
potencias_data_ts$hora <- hour(potencias_data_ts$Fecha_hora)
potencias_data_ts$mes <- month(potencias_data_ts$Fecha_hora)
potencias_data_ts$anio <- year(potencias_data_ts$Fecha_hora)
potencias_data_ts$hora
potencias_data_ts$mes
potencias_data_ts$anio
View(potencias_data_ts)
# Comprobacion de todos los valores en las columnas recien creadas
unique(potencias_data_ts$periodo_de_la_semana)
unique(potencias_data_ts$dia_de_la_semana)
unique(potencias_data_ts$hora)
unique(potencias_data_ts$mes)
unique(potencias_data_ts$anio)
View(potencias_data_ts)
View(potencias_data_ts)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
View(potencias_data_ts)
View(potencias_data_ts)
# Establecimiento del tipo de las columnas como "factor" que serviran para mostrar en grafico
potencias_data_ts$dia_de_la_semana <-as.factor(potencias_data_ts$dia_de_la_semana)
potencias_data_ts$periodo_de_la_semana <- as.factor(potencias_data_ts$periodo_de_la_semana)
potencias_data_ts$mes <- as.factor(potencias_data_ts$mes)
potencias_data_ts$hora <- as.factor(potencias_data_ts$hora)
potencias_data_ts$anio <- as.factor(potencias_data_ts$anio)
str(potencias_data_ts)
head(potencias_data_ts)
summary(potencias_data_ts)
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
+ ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
+ ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico diaria
ggplot(potencias_data_ts, aes(Fecha_hora, POTENCIATRAFO2))+geom_line(color="darkblue", size=1)+ggtitle('Potencias diarias del trafico del establecimiento')+labs(x="Fecha", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
#### Descripcion grafica  ####
# Comparacion de potencias trafico horaria
#(ver si hay diferencia entre diferentes horas)
ggplot(potencias_data_ts, aes(x=hora, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias horarias del trafico del establecimient')+labs(x="Hora", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico diaria
ggplot(potencias_data_ts, aes(Fecha_hora, POTENCIATRAFO2))+geom_line(color="darkblue", size=1)+ggtitle('Potencias diarias del trafico del establecimiento')+labs(x="Fecha", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico de los dias semanal
ggplot(potencias_data_ts, aes(x=dia_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias semanal del trafico del establecimiento')+labs(x="Dia de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencia trafico entre dias_jornada y fines_semana
ggplot(potencias_data_ts, aes(x=periodo_de_la_semana, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias entre semanal del trafico del establecimiento')+labs(x="Periodo de la semana", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comparacion de potencias trafico mensual
ggplot(potencias_data_ts, aes(x=mes, y=POTENCIATRAFO2)) +
geom_boxplot() + ggtitle('Potencias mensuales del trafico del establecimiento')+labs(x="Mes", y="Potencia")+ theme(plot.title = element_text(hjust=0.5))
# Comprobacion de existencia de valores faltantes (NA)
anyNA(potencias_data_ts)
# Particion de datos en conjuntos de train, test y validacion.
summary(potencias_data_ts)
### Datos de train: ###
# los datos anteriores desde fecha 2018-01-01 hasta 2018-04-04
train_data<-filter(potencias_data_ts, Fecha_hora< as.Date("2018-04-05"))
summary(train_data)
### Datos de test:  ###
#va a quedar los datos de ultimo dia para testing
test_data <-filter(potencias_data_ts, Fecha_hora>=as.Date("2018-04-05"))
head(test_data,10)
summary(test_data)
length(test_data$Fecha_hora)
### Datos de train: ###
# los datos anteriores desde fecha 2018-01-01 hasta 2018-04-04
train_data<-filter(potencias_data_ts, Fecha_hora<= as.Date("2018-04-05"))
summary(train_data)
### Datos de test:  ###
#va a quedar los datos de ultimo dia para testing
test_data <-filter(potencias_data_ts, Fecha_hora>=as.Date("2018-04-05"))
head(test_data,10)
summary(test_data)
View(potencias_data_ts)
### Datos de train: ###
# los datos anteriores desde fecha 2018-01-01 hasta 2018-04-04
train_data<-filter(potencias_data_ts, Fecha_hora<= as.Date("2017-12-30"))
summary(train_data)
### Datos de test:  ###
#va a quedar los datos de ultimo dia para testing
test_data <-filter(potencias_data_ts, Fecha_hora>=as.Date("2017-12-31"))
head(test_data,10)
summary(test_data)
length(test_data$Fecha_hora)
medidas_predecir=length(test_data$Fecha_hora) # que son 96 medidas del ultimo dia a predecir
summary(test_data)
### 1.1. Estrategia MIMO
t <- proc.time() # Inicio del cronometro
#- h=>num de valores de predecir, en este caso predecimos los dias de futuro anio
#- lags=> como se incrementa los valores
#- k=> 1 distancia
#- msas=> estrategia MIMO o recursiva
tsfknn_pred_mimo <- knn_forecasting(train_data$POTENCIATRAFO2,
h = medidas_predecir,
lags = 1:medidas_predecir,   #predecir los futuros 96 medidas del dia
k = 1,
msas = "MIMO")
proc.time()-t # Detencion del cronometro
# Evaluacion del modelo
ro_mimo <- rolling_origin(tsfknn_pred_mimo, h = medidas_predecir)
ro_mimo
# Grafico de predicciones para el horizonte de pronostico
plot(ro_mimo, h = medidas_predecir)
# Resultados exportados a csv
matriz_pronosticos_mimo<-data.frame(ro_mimo$predictions)
write.csv(matriz_pronosticos_mimo, "out_of_sample_tsfknn_mimo_prediction.csv")
matriz_pronosticos_mimo
# Calculo de rmse
knn_mimo_pred=t(matriz_pronosticos_mimo[1,1:(ncol(matriz_pronosticos_mimo))]) #extrae primera fila de datos
rmse(test_data$POTENCIA_TRAFO[0:medidas_predecir],knn_mimo_pred)
### 1.2. Estrategia recursiva
t <- proc.time() # Inicio del cronometro
### 1.2. Estrategia recursiva
t <- proc.time() # Inicio del cronometro
tsfknn_pred_rec<- knn_forecasting(train_data$POTENCIA_TRAFO,
h = medidas_predecir,
lags = 1:medidas_predecir,
k = 1,
msas = "recursive")
######################################################################################
##### METODO 2. FORECASTING DE SERIES TEMPORALES CON REGLAS DIFUSAS (LIBRERIA FRBS)
######################################################################################
### 2.0 tratamiento de datos para entrenamiento del metodo FRBS
# Bucle que guarda grupos de 96 datos en vectores
# Cada vector contiene 96 observaciones (frecuencia diaria) + 1 variable objetivo
data_vectors<- list()
n <- length(potencias_data_ts$POTENCIA_TRAFO)-(medidas_predecir)
for(i in 1:n){
data_vector <- list(potencias_data_ts$POTENCIA_TRAFO[i:(i+medidas_predecir)])
data_vectors <- c(data_vectors, data_vector)
}
# Creacion de un dataframe con tantas filas como vectores se han creado y 97 columnas
# La ultima columna contiene los valores de la variable objetivo
frbs_data <- as.data.frame(t(as.data.frame(data_vectors)))
rownames(frbs_data)<-NULL
# Creacion de particiones de entrenamiento y test
set.seed(111) # Se fija una semilla para poder replicar el experimento
frbs_train_partition <- createDataPartition(y=frbs_data[,ncol(frbs_data)],
p= 0.7, # Ratio de particion 70:30
list = FALSE)
